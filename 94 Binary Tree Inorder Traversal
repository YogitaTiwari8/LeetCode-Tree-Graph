// LeetCode: 94
// Problem name: Binary Tree Inorder Traversal
// https://leetcode.com/problems/binary-tree-inorder-traversal/
// Category: Tree, DFS, Recursion
// Approach:
// - Use a helper function to perform recursive inorder traversal.
// - Recursively visit the left subtree, then visit root, then the right subtree.
// - Store the values in a list and return it.

Solution
--
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        inOrderHelper(root, list);
        return list;
    }

    void inOrderHelper(TreeNode root, List<Integer> list) {
        if (root == null) {
            return;
        }
        inOrderHelper(root.left, list);        // Traverse left subtree
        list.add(root.val);                    // Visit root
        inOrderHelper(root.right, list);       // Traverse right subtree
    }
}
--
